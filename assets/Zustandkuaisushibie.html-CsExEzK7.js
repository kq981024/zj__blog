import{_ as o,r as e,o as c,c as u,a as n,b as s,d as p,e as a}from"./app-R0kGiGuz.js";const l={},i=a(`<h3 id="什么是zustand" tabindex="-1"><a class="header-anchor" href="#什么是zustand"><span>什么是Zustand</span></a></h3><h5 id="zustand-可以作为-react-应用中的一个状态管理器-跟vue中的pinia对标-基于-flux-模型实现的小型、快速和可扩展的状态管理解决方案-拥有基于-hooks-的舒适的api。简单理解就是react先前的redux状态管理较为繁琐-轻量简易化的zustand近些年开始流行-真滴好用-强烈推荐-拿下拿下。" tabindex="-1"><a class="header-anchor" href="#zustand-可以作为-react-应用中的一个状态管理器-跟vue中的pinia对标-基于-flux-模型实现的小型、快速和可扩展的状态管理解决方案-拥有基于-hooks-的舒适的api。简单理解就是react先前的redux状态管理较为繁琐-轻量简易化的zustand近些年开始流行-真滴好用-强烈推荐-拿下拿下。"><span><code>Zustand</code> 可以作为 React 应用中的一个状态管理器，跟<code>Vue</code>中的<code>Pinia</code>对标，基于 <code>Flux</code> 模型实现的小型、快速和可扩展的状态管理解决方案，拥有基于 <code>hooks</code> 的舒适的API。简单理解就是<code>React</code>先前的<code>Redux</code>状态管理较为繁琐，轻量简易化的<code>Zustand</code>近些年开始流行（真滴好用，强烈推荐），拿下拿下。</span></a></h5><hr><h3 id="zustand的定义与更改" tabindex="-1"><a class="header-anchor" href="#zustand的定义与更改"><span>Zustand的定义与更改</span></a></h3><ul><li><h5 id="create-定义一个状态-供给全局消费" tabindex="-1"><a class="header-anchor" href="#create-定义一个状态-供给全局消费"><span>create：定义一个状态，供给全局消费</span></a></h5><pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>create<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>immer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/middleware/immer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Actions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">setToken</span><span class="token operator">:</span> <span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> usePermissionsStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>State <span class="token operator">&amp;</span> Actions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token function">immer</span><span class="token punctuation">(</span>set <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    token<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 设置token</span>
    <span class="token function-variable function">setToken</span><span class="token operator">:</span> <span class="token keyword">async</span> token <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span>pre <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> usePermissionsStore<span class="token punctuation">;</span>

</code></pre></li><li><h5 id="set-更新和合并状态-将与存储中的现有状态进行浅合并" tabindex="-1"><a class="header-anchor" href="#set-更新和合并状态-将与存储中的现有状态进行浅合并"><span>set：更新和合并状态，将与存储中的现有状态进行浅合并</span></a></h5><pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>create<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>immer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/middleware/immer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Actions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">setToken</span><span class="token operator">:</span> <span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> usePermissionsStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>State <span class="token operator">&amp;</span> Actions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token function">immer</span><span class="token punctuation">(</span>set <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token comment">//  set浅更新存储中的token</span>
    token<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setToken</span><span class="token operator">:</span> <span class="token keyword">async</span> token <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span>pre <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> usePermissionsStore<span class="token punctuation">;</span>
</code></pre></li><li><h5 id="get-异步获取当前state-set也可在更新中获取" tabindex="-1"><a class="header-anchor" href="#get-异步获取当前state-set也可在更新中获取"><span>get：异步获取当前state，set也可在更新中获取</span></a></h5><pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>create<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>immer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/middleware/immer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">State</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Actions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">setToken</span><span class="token operator">:</span> <span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> usePermissionsStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>State <span class="token operator">&amp;</span> Actions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token function">immer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span>get<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> 
    token<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
     <span class="token comment">// 异步获取存储中的token  </span>
    <span class="token function-variable function">getToken</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> usePermissionsStore<span class="token punctuation">;</span>
</code></pre></li></ul><hr><h3 id="zustand的消费" tabindex="-1"><a class="header-anchor" href="#zustand的消费"><span>Zustand的消费</span></a></h3><h5 id="所谓消费-其实就是使用和更改zustand中的状态-但由于react的渲染机制-消费要-定性消费-即消费自己需要的-配合useshallow钩子实现多个状态选择的单一对象-浅比较。如果没有-理智消费-即会出现在该状态块中的任何一项出现变更时-重新渲染页面-导致性能问题。" tabindex="-1"><a class="header-anchor" href="#所谓消费-其实就是使用和更改zustand中的状态-但由于react的渲染机制-消费要-定性消费-即消费自己需要的-配合useshallow钩子实现多个状态选择的单一对象-浅比较。如果没有-理智消费-即会出现在该状态块中的任何一项出现变更时-重新渲染页面-导致性能问题。"><span>所谓消费，其实就是使用和更改Zustand中的状态，但由于React的渲染机制，消费要“定性消费”即消费自己需要的，配合useShallow钩子实现多个状态选择的单一对象，浅比较。如果没有&quot;理智消费&quot;即会出现在该状态块中的任何一项出现变更时，重新渲染页面，导致性能问题。</span></a></h5><pre><code class="language-tsx"> <span class="token comment">//  数组形式</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>setToken<span class="token punctuation">,</span> setUserInfo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usePermissionsStore</span><span class="token punctuation">(</span>
    <span class="token function">useShallow</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>setToken<span class="token punctuation">,</span> state<span class="token punctuation">.</span>setUserInfo<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  对象形式</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>setToken<span class="token punctuation">,</span> setUserInfo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePermissionsStore</span><span class="token punctuation">(</span>
    <span class="token function">useShallow</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>setToken<span class="token operator">:</span>state<span class="token punctuation">.</span>setToken<span class="token punctuation">,</span>setUserInfo<span class="token operator">:</span>state<span class="token punctuation">.</span>setUserInfo<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment">// Map形式, 当排序、数量和 key 发生变化后, 组件重新渲染</span>
<span class="token keyword">const</span> treats <span class="token operator">=</span> <span class="token function">useBearStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>treats<span class="token punctuation">)</span><span class="token punctuation">,</span> shallow<span class="token punctuation">)</span>
</code></pre><h5 id="当然也可以实现自定义比较方法" tabindex="-1"><a class="header-anchor" href="#当然也可以实现自定义比较方法"><span>当然也可以实现自定义比较方法</span></a></h5><pre><code class="language-typescript"><span class="token keyword">const</span> treats <span class="token operator">=</span> <span class="token function">useBearStore</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>treats<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>oldTreats<span class="token punctuation">,</span> newTreats<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compare</span><span class="token punctuation">(</span>oldTreats<span class="token punctuation">,</span> newTreats<span class="token punctuation">)</span>   <span class="token comment">// compare 为自定义的比较方法 返回boolean</span>
<span class="token punctuation">)</span>
</code></pre><hr><h3 id="zustand的中间件" tabindex="-1"><a class="header-anchor" href="#zustand的中间件"><span>Zustand的中间件</span></a></h3>`,13),k={id:"持久化中间件-详见-https-github-com-pmndrs-zustand-blob-main-docs-integrations-persisting-store-data-md",tabindex:"-1"},r={class:"header-anchor",href:"#持久化中间件-详见-https-github-com-pmndrs-zustand-blob-main-docs-integrations-persisting-store-data-md"},d={href:"https://github.com/pmndrs/zustand/blob/main/docs/integrations/persisting-store-data.md",target:"_blank",rel:"noopener noreferrer"},h=a(`<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> persist<span class="token punctuation">,</span> createJSONStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/middleware&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> usePermissionsStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>
  <span class="token function">persist</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>set<span class="token punctuation">,</span> get<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      token<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 唯一值</span>
      storage<span class="token operator">:</span> <span class="token function">createJSONStorage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sessionStorage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// localStorage持久 sessionStorage 页面生命期</span>
        <span class="token comment">// 清除持久化  usePermissionsStore.persist.clearStorage()</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre>`,1),m=a(`<li><h5 id="immer中间件-究极推荐-复杂数据类型的救星。在本文zustand的定义和消费中有提及-往上翻。" tabindex="-1"><a class="header-anchor" href="#immer中间件-究极推荐-复杂数据类型的救星。在本文zustand的定义和消费中有提及-往上翻。"><span>immer中间件：究极推荐，复杂数据类型的救星。在本文Zustand的定义和消费中有提及，往上翻。</span></a></h5></li><li><h5 id="redux中间件-如果写习惯了redux可以考虑使用" tabindex="-1"><a class="header-anchor" href="#redux中间件-如果写习惯了redux可以考虑使用"><span>redux中间件：如果写习惯了redux可以考虑使用</span></a></h5></li><li><h5 id="devtools中间件-利用开发者工具追踪和调试store" tabindex="-1"><a class="header-anchor" href="#devtools中间件-利用开发者工具追踪和调试store"><span>devtools中间件：利用开发者工具追踪和调试Store</span></a></h5></li><li><h5 id="自定义中间件-随心所以-喜欢怎么来就怎么来-下面是封装了一个当状态改变就打印新值的中间件" tabindex="-1"><a class="header-anchor" href="#自定义中间件-随心所以-喜欢怎么来就怎么来-下面是封装了一个当状态改变就打印新值的中间件"><span>自定义中间件：随心所以，喜欢怎么来就怎么来,下面是封装了一个当状态改变就打印新值的中间件</span></a></h5><pre><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>set<span class="token punctuation">,</span> get<span class="token punctuation">,</span> api<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">config</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  applying&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  new state&#39;</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    get<span class="token punctuation">,</span>
    api
  <span class="token punctuation">)</span>

<span class="token keyword">const</span> useBeeStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    bees<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setBees</span><span class="token operator">:</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bees<span class="token operator">:</span> input <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></li><li><h5 id="中间件总结-使用过程中肯定会有疑惑多个中间件应该如何嵌套-这个问题由于文档在不停变化-需要根据实际情况考虑" tabindex="-1"><a class="header-anchor" href="#中间件总结-使用过程中肯定会有疑惑多个中间件应该如何嵌套-这个问题由于文档在不停变化-需要根据实际情况考虑"><span>中间件总结：使用过程中肯定会有疑惑多个中间件应该如何嵌套，这个问题由于文档在不停变化，需要根据实际情况考虑</span></a></h5></li>`,5),g=n("hr",null,null,-1),f=n("h3",{id:"zustand总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#zustand总结"},[n("span",null,"Zustand总结")])],-1),w={id:"zustand是一款轻量化的状态管理工具-配合中间件可以方便的实现对全局状态的管理-好用滴很。篇幅有限-详情移步官网。https-awesomedevin-github-io-zustand-vue-docs-introduce-what-is-zustand",tabindex:"-1"},y={class:"header-anchor",href:"#zustand是一款轻量化的状态管理工具-配合中间件可以方便的实现对全局状态的管理-好用滴很。篇幅有限-详情移步官网。https-awesomedevin-github-io-zustand-vue-docs-introduce-what-is-zustand"},b={href:"https://awesomedevin.github.io/zustand-vue/docs/introduce/what-is-zustand",target:"_blank",rel:"noopener noreferrer"};function z(x,_){const t=e("ExternalLinkIcon");return c(),u("div",null,[i,n("ul",null,[n("li",null,[n("h5",k,[n("a",r,[n("span",null,[s("持久化中间件(详见："),n("a",d,[s("https://github.com/pmndrs/zustand/blob/main/docs/integrations/persisting-store-data.md"),p(t)]),s(")")])])]),h]),m]),g,f,n("h5",w,[n("a",y,[n("span",null,[s("Zustand是一款轻量化的状态管理工具，配合中间件可以方便的实现对全局状态的管理，好用滴很。篇幅有限，详情移步官网。"),n("a",b,[s("https://awesomedevin.github.io/zustand-vue/docs/introduce/what-is-zustand"),p(t)])])])])])}const v=o(l,[["render",z],["__file","Zustandkuaisushibie.html.vue"]]),Z=JSON.parse('{"path":"/blogs/React/Zustandkuaisushibie.html","title":"Zustand快速识别","lang":"en-US","frontmatter":{"title":"Zustand快速识别","date":"2023-08-15T00:00:00.000Z","tags":["React"],"categories":["React"]},"headers":[{"level":3,"title":"什么是Zustand","slug":"什么是zustand","link":"#什么是zustand","children":[]},{"level":3,"title":"Zustand的定义与更改","slug":"zustand的定义与更改","link":"#zustand的定义与更改","children":[]},{"level":3,"title":"Zustand的消费","slug":"zustand的消费","link":"#zustand的消费","children":[]},{"level":3,"title":"Zustand的中间件","slug":"zustand的中间件","link":"#zustand的中间件","children":[]},{"level":3,"title":"Zustand总结","slug":"zustand总结","link":"#zustand总结","children":[]}],"git":{"createdTime":1717751818000,"updatedTime":1717751818000,"contributors":[{"name":"wkq","email":"444296534@qq.com","commits":1}]},"filePathRelative":"blogs/React/Zustand快速识别.md"}');export{v as comp,Z as data};
